[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gcp-ai-agent"
version = "1.0.0"
description = "Autonomous AI agent for generating GCP web applications"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "Your Organization", email = "dev@yourcompany.com"},
]
keywords = ["ai", "gcp", "code-generation", "automation", "web-development"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "google-cloud-firestore>=2.13.1",
    "google-cloud-storage>=2.10.0",
    "google-cloud-pubsub>=2.18.4",
    "google-cloud-secret-manager>=2.16.4",
    "google-cloud-monitoring>=2.16.0",
    "google-cloud-logging>=3.8.0",
    "google-cloud-run>=0.10.3",
    "google-cloud-build>=3.20.1",
    "vertexai>=1.38.1",
    "openai>=1.3.7",
    "anthropic>=0.7.7",
    "aiohttp>=3.9.1",
    "httpx>=0.25.2",
    "numpy>=1.25.2",
    "pandas>=2.1.4",
    "sentence-transformers>=2.2.2",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "faker>=20.1.0",
]

[project.urls]
Homepage = "https://github.com/your-org/gcp-ai-agent"
Documentation = "https://docs.yourcompany.com"
Repository = "https://github.com/your-org/gcp-ai-agent.git"
Issues = "https://github.com/your-org/gcp-ai-agent/issues"
Changelog = "https://github.com/your-org/gcp-ai-agent/blob/main/CHANGELOG.md"

[project.scripts]
ai-agent = "app.main:main"
ai-agent-setup = "app.scripts.setup:main"
ai-agent-deploy = "app.scripts.deploy:main"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/app",
    "/tests",
    "/docs",
    "/scripts",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.cloud.*",
    "vertexai.*",
    "anthropic.*",
    "openai.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
